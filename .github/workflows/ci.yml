name: CI - Validation and Linting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate news data
      run: npm run validate-news
      
    - name: Run ESLint
      run: npm run lint:check
      
    - name: Check module syntax
      run: |
        echo "Checking ES6 module syntax..."
        for file in modules/*.js; do
          echo "Checking $file..."
          node --check "$file"
        done
        
    - name: Test module imports
      run: |
        echo "Testing module imports..."
        node -e "
          import('./modules/data-loader.js').then(() => console.log('✅ data-loader.js'));
          import('./modules/cache-utils.js').then(() => console.log('✅ cache-utils.js'));
          import('./modules/topic-extract.js').then(() => console.log('✅ topic-extract.js'));
          import('./modules/cluster-engine.js').then(() => console.log('✅ cluster-engine.js'));
          import('./modules/card-renderer.js').then(() => console.log('✅ card-renderer.js'));
          import('./modules/llm-topic.js').then(() => console.log('✅ llm-topic.js'));
        "
        
    - name: Check for sensitive data
      run: |
        echo "Checking for sensitive data patterns..."
        if grep -r "sk-" modules/ scripts/ || grep -r "api_key" modules/ scripts/ || grep -r "secret" modules/ scripts/ --exclude="*.md"; then
          echo "❌ Potential sensitive data found!"
          exit 1
        else
          echo "✅ No sensitive data patterns found"
        fi
        
    - name: Validate HTML structure
      run: |
        echo "Basic HTML validation..."
        for file in *.html; do
          echo "Checking $file..."
          # Basic checks for required elements
          if ! grep -q "<!DOCTYPE html>" "$file"; then
            echo "❌ Missing DOCTYPE in $file"
            exit 1
          fi
          if ! grep -q "<html" "$file"; then
            echo "❌ Missing <html> tag in $file"
            exit 1
          fi
          if ! grep -q "<head>" "$file"; then
            echo "❌ Missing <head> tag in $file"
            exit 1
          fi
          if ! grep -q "<body>" "$file"; then
            echo "❌ Missing <body> tag in $file"
            exit 1
          fi
        done
        echo "✅ Basic HTML structure validation passed"
        
    - name: Check for required files
      run: |
        echo "Checking for required files..."
        required_files=(
          "index.html"
          "legacy-index.html"
          "card-generator.html"
          "modules/data-loader.js"
          "modules/cache-utils.js"
          "modules/topic-extract.js"
          "modules/cluster-engine.js"
          "modules/card-renderer.js"
          "modules/llm-topic.js"
          ".eslintrc.json"
          "package.json"
          "scripts/validate-news.mjs"
          "README.md"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required file missing: $file"
            exit 1
          fi
        done
        echo "✅ All required files present"
        
    - name: Test clustering functionality
      run: |
        echo "Testing clustering functionality with sample data..."
        node -e "
          import { clusterEngine } from './modules/cluster-engine.js';
          import { topicExtractor } from './modules/topic-extract.js';
          
          // Sample test data
          const testNews = [
            {
              id: 1,
              title: 'NVIDIA announces new AI chip',
              summary: 'NVIDIA has announced a breakthrough in AI processing',
              tags: ['AI', 'NVIDIA', 'Technology'],
              source: 'Tech News',
              date: new Date().toISOString(),
              url: 'https://example.com/1'
            },
            {
              id: 2,
              title: 'OpenCV updates computer vision library',
              summary: 'New version of OpenCV brings improved performance',
              tags: ['OpenCV', 'Computer Vision', 'Software'],
              source: 'OpenCV Team',
              date: new Date().toISOString(),
              url: 'https://example.com/2'
            }
          ];
          
          console.log('Testing topic extraction...');
          const topics = topicExtractor.extractFromItem(testNews[0]);
          console.log('✅ Topic extraction works');
          
          console.log('Testing clustering...');
          const clusters = clusterEngine.clusterNews(testNews);
          console.log(\`✅ Clustering works: \${clusters.length} clusters created\`);
          
          console.log('Testing diagnostics...');
          const diag = clusterEngine.getDiagnostics();
          console.log(\`✅ Diagnostics work: processed \${diag.itemCount} items in \${diag.processTime}ms\`);
        "
        
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        echo "Running security checks..."
        
        # Check for common security issues
        echo "Checking for eval() usage..."
        if grep -r "eval(" modules/ scripts/ *.html; then
          echo "❌ Found eval() usage - potential security risk"
          exit 1
        fi
        
        echo "Checking for innerHTML with user data..."
        if grep -r "innerHTML.*\+" modules/ scripts/ *.html; then
          echo "⚠️ Found innerHTML concatenation - review for XSS risks"
        fi
        
        echo "Checking for localStorage security..."
        if grep -r "localStorage.*apiKey" modules/ scripts/; then
          echo "⚠️ API keys in localStorage - ensure proper handling"
        fi
        
        echo "✅ Security checks completed"
        
  compatibility:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check browser compatibility
      run: |
        echo "Checking for modern JavaScript features usage..."
        
        # Check for ES6+ features that might need polyfills
        echo "Checking for async/await..."
        if grep -r "async " modules/; then
          echo "✅ Uses async/await (ES2017+)"
        fi
        
        echo "Checking for arrow functions..."
        if grep -r "=>" modules/; then
          echo "✅ Uses arrow functions (ES6+)"
        fi
        
        echo "Checking for template literals..."
        if grep -r "\`" modules/; then
          echo "✅ Uses template literals (ES6+)"
        fi
        
        echo "Checking for destructuring..."
        if grep -r "const {" modules/; then
          echo "✅ Uses destructuring (ES6+)"
        fi
        
        echo "Checking for import/export..."
        if grep -r "import " modules/; then
          echo "✅ Uses ES6 modules"
        fi
        
        echo "✅ Modern JavaScript features detected - ensure browser support"